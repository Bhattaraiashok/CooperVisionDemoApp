

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Core\App.config"
//     Connection String Name: "CooperVisionModels"
//     Connection String:      "data source=localhost;initial catalog=CooperVisionDemo;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace NepFlex.Core.Entities.CooperVision
{
    using System.Linq;

    #region Unit of work

    public interface IMyDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<BlogComment> BlogComments { get; set; } // BlogComments
        System.Data.Entity.DbSet<MyBlog> MyBlogs { get; set; } // MyBlog

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int MyBlogI(string title, string detail);
        // MyBlogIAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS();
        System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogSReturnModel>> MyBlogSAsync();

        int MyBlogCommentsI(int? blogId, string comment);
        // MyBlogCommentsIAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId);
        System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogCommentsSReturnModel>> MyBlogCommentsSAsync(int? blogId);

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MyDbContext : System.Data.Entity.DbContext, IMyDbContext
    {
        public System.Data.Entity.DbSet<BlogComment> BlogComments { get; set; } // BlogComments
        public System.Data.Entity.DbSet<MyBlog> MyBlogs { get; set; } // MyBlog

        static MyDbContext()
        {
            System.Data.Entity.Database.SetInitializer<MyDbContext>(null);
        }

        public MyDbContext()
            : base("Name=CooperVisionModels")
        {
        }

        public MyDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public MyDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public MyDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BlogCommentConfiguration());
            modelBuilder.Configurations.Add(new MyBlogConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BlogCommentConfiguration(schema));
            modelBuilder.Configurations.Add(new MyBlogConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int MyBlogI(string title, string detail)
        {
            var titleParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Title", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = title, Size = 350 };
            if (titleParam.Value == null)
                titleParam.Value = System.DBNull.Value;

            var detailParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Detail", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = detail, Size = -1 };
            if (detailParam.Value == null)
                detailParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[MyBlog_I] @Title, @Detail", titleParam, detailParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS()
        {
            int procResult;
            return MyBlogS(out procResult);
        }

        public System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<MyBlogSReturnModel>("EXEC @procResult = [dbo].[MyBlog_S] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogSReturnModel>> MyBlogSAsync()
        {
            var procResultData = await Database.SqlQuery<MyBlogSReturnModel>("EXEC [dbo].[MyBlog_S] ").ToListAsync();

            return procResultData;
        }

        public int MyBlogCommentsI(int? blogId, string comment)
        {
            var blogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BlogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = blogId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!blogId.HasValue)
                blogIdParam.Value = System.DBNull.Value;

            var commentParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Comment", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = comment, Size = 500 };
            if (commentParam.Value == null)
                commentParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[MyBlogComments_I] @BlogID, @Comment", blogIdParam, commentParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId)
        {
            int procResult;
            return MyBlogCommentsS(blogId, out procResult);
        }

        public System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId, out int procResult)
        {
            var blogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BlogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = blogId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!blogId.HasValue)
                blogIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<MyBlogCommentsSReturnModel>("EXEC @procResult = [dbo].[MyBlogComments_S] @BlogID", blogIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogCommentsSReturnModel>> MyBlogCommentsSAsync(int? blogId)
        {
            var blogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@BlogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = blogId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!blogId.HasValue)
                blogIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<MyBlogCommentsSReturnModel>("EXEC [dbo].[MyBlogComments_S] @BlogID", blogIdParam).ToListAsync();

            return procResultData;
        }

    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeMyDbContext : IMyDbContext
    {
        public System.Data.Entity.DbSet<BlogComment> BlogComments { get; set; }
        public System.Data.Entity.DbSet<MyBlog> MyBlogs { get; set; }

        public FakeMyDbContext()
        {
            BlogComments = new FakeDbSet<BlogComment>("CommentId");
            MyBlogs = new FakeDbSet<MyBlog>("BlogId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        public System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        public System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int MyBlogI(string title, string detail)
        {

            return 0;
        }

        public System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS()
        {
            int procResult;
            return MyBlogS(out procResult);
        }

        public System.Collections.Generic.List<MyBlogSReturnModel> MyBlogS(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<MyBlogSReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogSReturnModel>> MyBlogSAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(MyBlogS(out procResult));
        }

        public int MyBlogCommentsI(int? blogId, string comment)
        {

            return 0;
        }

        public System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId)
        {
            int procResult;
            return MyBlogCommentsS(blogId, out procResult);
        }

        public System.Collections.Generic.List<MyBlogCommentsSReturnModel> MyBlogCommentsS(int? blogId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<MyBlogCommentsSReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<MyBlogCommentsSReturnModel>> MyBlogCommentsSAsync(int? blogId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(MyBlogCommentsS(blogId, out procResult));
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // BlogComments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class BlogComment
    {
        public int CommentId { get; set; } // CommentID (Primary key)
        public int BlogId { get; set; } // BlogID
        public string Comment { get; set; } // Comment (length: 500)
        public System.DateTime CreatedOn { get; set; } // Created_On
        public System.DateTime? ModifiedOn { get; set; } // Modified_On
        public bool Active { get; set; } // Active

        // Foreign keys

        /// <summary>
        /// Parent MyBlog pointed by [BlogComments].([BlogId]) (FK_BlogComments_MyBlog_On_BlogID)
        /// </summary>
        public virtual MyBlog MyBlog { get; set; } // FK_BlogComments_MyBlog_On_BlogID

        public BlogComment()
        {
            CreatedOn = System.DateTime.Now;
            Active = true;
        }
    }

    // MyBlog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MyBlog
    {
        public int BlogId { get; set; } // BlogID (Primary key)
        public string Title { get; set; } // Title (length: 350)
        public string Detail { get; set; } // Detail
        public System.DateTime CreatedOn { get; set; } // Created_On
        public System.DateTime? ModifiedOn { get; set; } // Modified_On
        public bool Active { get; set; } // Active

        // Reverse navigation

        /// <summary>
        /// Child BlogComments where [BlogComments].[BlogID] point to this entity (FK_BlogComments_MyBlog_On_BlogID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<BlogComment> BlogComments { get; set; } // BlogComments.FK_BlogComments_MyBlog_On_BlogID

        public MyBlog()
        {
            CreatedOn = System.DateTime.Now;
            Active = true;
            BlogComments = new System.Collections.Generic.List<BlogComment>();
        }
    }

    #endregion

    #region POCO Configuration

    // BlogComments
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class BlogCommentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BlogComment>
    {
        public BlogCommentConfiguration()
            : this("dbo")
        {
        }

        public BlogCommentConfiguration(string schema)
        {
            ToTable("BlogComments", schema);
            HasKey(x => x.CommentId);

            Property(x => x.CommentId).HasColumnName(@"CommentID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BlogId).HasColumnName(@"BlogID").HasColumnType("int").IsRequired();
            Property(x => x.Comment).HasColumnName(@"Comment").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.CreatedOn).HasColumnName(@"Created_On").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedOn).HasColumnName(@"Modified_On").HasColumnType("datetime").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();

            // Foreign keys
            HasRequired(a => a.MyBlog).WithMany(b => b.BlogComments).HasForeignKey(c => c.BlogId).WillCascadeOnDelete(false); // FK_BlogComments_MyBlog_On_BlogID
        }
    }

    // MyBlog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MyBlogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MyBlog>
    {
        public MyBlogConfiguration()
            : this("dbo")
        {
        }

        public MyBlogConfiguration(string schema)
        {
            ToTable("MyBlog", schema);
            HasKey(x => x.BlogId);

            Property(x => x.BlogId).HasColumnName(@"BlogID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(350);
            Property(x => x.Detail).HasColumnName(@"Detail").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.CreatedOn).HasColumnName(@"Created_On").HasColumnType("datetime").IsRequired();
            Property(x => x.ModifiedOn).HasColumnName(@"Modified_On").HasColumnType("datetime").IsOptional();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MyBlogSReturnModel
    {
        public System.Int32 BlogID { get; set; }
        public System.String Title { get; set; }
        public System.String Detail { get; set; }
        public System.DateTime Created_On { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.31.1.0")]
    public class MyBlogCommentsSReturnModel
    {
        public System.String Comment { get; set; }
        public System.DateTime Created_On { get; set; }
    }

    #endregion

}
// </auto-generated>

